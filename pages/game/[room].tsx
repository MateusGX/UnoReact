import { useRouter } from "next/router";
import { useState, useEffect, useRef } from "react";
import { validate } from "uuid";
import styles from "../../styles/Room.module.css";
import Head from "next/head";
import Board from "../../components/Board";
import { io } from "socket.io-client";

const socket = io();

export default function Game() {
  const router = useRouter();
  const { room } = router.query;
  const [isValid, setIsValid] = useState(null);
  const [cards, setCards] = useState([]);
  const [boardCard, setBoardCard] = useState(null);
  const [started, setStarted] = useState(false);
  const [isMaster, setIsMaster] = useState(false);
  const [playerCount, setPlayerCount] = useState(0);
  const [players, setPlayers] = useState([]);
  const [playerCurrent, setPlayerCurrent] = useState(null);
  const [joined, setJoined] = useState(false);
  const [userName, setUserName] = useState("");
  const [hasWinner, setHasWinner] = useState({ username: "", winner: false });

  useEffect(() => {
    socket.on("connect", () => {
      socket.emit("check", room);
      socket.on("valid", (valid) => {
        setIsValid(valid);
      });
      socket.on("joined", (isMasterSocket) => {
        setJoined(true);
        setIsMaster(isMasterSocket);
      });
      socket.on("playerJoined", (players) => {
        setPlayerCount(players);
      });
      socket.on("playerLeave", (players) => {
        setPlayerCount(players);
      });
      socket.on("getCards", (cards) => {
        setCards(cards);
      });
      socket.on("getPlayers", (players) => {
        setPlayers(players);
      });
      socket.on("boardCard", (card) => {
        setBoardCard(card);
        if (!started) setStarted(true);
      });
      socket.on("currentPlayer", (playerCurrentSocket) => {
        setPlayerCurrent(playerCurrentSocket);
      });
      socket.on("win", (username) => {
        setHasWinner({
          username,
          winner: true,
        });
      });
    });
  }, []);

  if (!validate(room as string)) {
    return (
      <div className={styles.container}>
        <Head>
          <title>UNO React - Game Not Found</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <h1>GAME NOT FOUND</h1>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>UNO React - Lobby</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isValid == null ? (
        <h1>Loading...</h1>
      ) : !isValid ? (
        <h1>Full Room</h1>
      ) : isValid && !joined ? (
        <main>
          <input
            type="text"
            placeholder="Username"
            value={userName}
            onChange={(e) => setUserName(e.target.value)}
          />
          <button
            onClick={() => {
              socket.emit(
                "join",
                room,
                userName || `User_${Math.floor(Math.random() * 10000)}`
              );
            }}
          >
            JOIN
          </button>
        </main>
      ) : isMaster && !started ? (
        <main>
          <h1>Waiting For Players</h1>
          <h2>{playerCount}/10</h2>
          {playerCount >= 2 ? (
            <button
              onClick={() => {
                socket.emit("startGame");
              }}
            >
              START
            </button>
          ) : (
            <></>
          )}
        </main>
      ) : !started ? (
        <h1>Waiting For Start</h1>
      ) : !hasWinner.winner ? (
        <Board
          players={players}
          cards={cards}
          boardCard={boardCard}
          socket={socket}
          currentPlayer={playerCurrent}
        />
      ) : (
        <h1>{hasWinner.username} won the game</h1>
      )}
    </div>
  );
}
